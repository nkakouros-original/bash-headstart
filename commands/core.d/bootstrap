#!/usr/bin/env bash
#
# Bootstrap the tool on this machine
#
# Usage:
#   {{go}} {{cmd}} [options]
#
# Options:
#   --update          Update configuration and dependencies
#   --noninteractive  Do not ask anything
#
#
# Examples:
#
#   Bootstrap the tool:
#     {{go}} {{cmd}}
#
#   Update dependencies and configuration
#     {{go}} {{cmd}} --update

# TODO add version checks
# TODO inform about sudo
# TODO install hydra, msfconsole, etc only if devel

function core_bootstrap_install_command() {
  # local command
  # command=" \
  #   cd '\"'$PWD'\"' \&\& \
  #   eval '\"'\$\('\"$PWD/${0##*/}\"' env $_HEADSTART_CMD\)'\"' \
  #   \&\& cd - \
  #   \>/dev/null"

  # sudo su -c " \
  #   echo export HEADSTART_INSTALLATION_DIR='\"'$PWD'\"' \
  #   >| /etc/profile.d/$_HEADSTART_CMD.sh \
  # "

  # sudo su -c "echo $command >> /etc/bash_completion.d/$_HEADSTART_CMD.sh"
  sudo bash -c "$0 env $_HEADSTART_CMD >|/etc/bash_completion.d/$_HEADSTART_CMD.sh"
}

function core_bootstrap_install_dependencies() {
  . "$_GO_USE_MODULES" 'platform'

  info 'installing dependencies...'

  local path
  path="$_HEADSTART_CORE_DIR/commands/core.d/bootstrap.d/$_GO_PLATFORM_ID.sh"
  if [[ -f "$path" ]]; then
    . "$path"
  fi
}

function core_bootstrap_git_lay() {
  info 'layering dependencies with gilt...'
  if [[ -e "$PROJECT_DIR/vendor/gilt.$CONF_USER_ROLE.yml" ]]; then
    gilt --config "$PROJECT_DIR/vendor/gilt.$CONF_USER_ROLE.yml" overlay
  elif [[ -e "$PROJECT_DIR/vendor/gilt.yml" ]]; then
    gilt --config "$PROJECT_DIR/vendor/gilt.yml" overlay
  fi
}

function core_bootstrap_git_collab() {
  if [[ ! -e "$PROJECT_DIR/.gitcollab" ]]; then
    return
  fi

  info "Adding collab git remotes"

  if [[ ! -e "PROJECT_DIR/.gitcollab" ]]; then
    return
  fi

  local -a remotes
  readarray -t remotes <<<"$(git remote)"

  while IFS=, read remote repo branch; do
    if [[ "$repo" == '' ]]; then
      break
    fi

    if [[ " ${remotes[*]} " == *" $remote "* ]]; then
      continue
    fi

    git remote add "$remote" "$repo"
  done <<<"$(grep -v '^#' "$PROJECT_DIR/.gitcollab" | grep -v '^$')"
}

function core_bootstrap_git_hooks() {
  info "Installing git hooks"

  export AUTOHOOK_HOOKS_DIR="$_HEADSTART_CORE_DIR/misc/git/hooks"
  "$_HEADSTART_CORE_DIR/vendor/autohook/autohook.sh" 'install'

  local cmd
  cmd+="echo -e '"
  cmd+="AUTOHOOK_HOOKS_DIR='\"'$_HEADSTART_CORE_DIR/misc/git/hooks'\"'\n"
  if [[ "${HEADSTART_HOOKS_DIR-}" != '' ]]; then
    cmd+="AUTOHOOK_HOOKS_DIR+=':\"'$HEADSTART_HOOKS_DIR'\"'\n"
  fi
  cmd+="export AUTOHOOK_HOOKS_DIR\n"
  cmd+="export AUTOHOOK_DEBUG=1\n"
  cmd+="' >> /etc/profile.d/$_HEADSTART_CMD.sh"
  sudo su -c "$cmd"
}

function core_bootstrap_git_branches() {
  info 'checking out git submodule branches'
  git submodule foreach -q --recursive \
    'git checkout $(git config -f "$toplevel/.gitmodules" submodule.$name.branch || echo master)'
}

function core_bootstrap_set_version() {
  if [[ ! -e "$_HEADSTART_CORE_LOCK" ]]; then
    mkdir -p "${_HEADSTART_CORE_LOCK%/*}"
    : >"$_HEADSTART_CORE_LOCK"
  fi

  if [[ ! -e "$PROJECT_DIR/version" ]]; then
    cp "$_HEADSTART_CORE_DIR/misc/version.template" "$PROJECT_DIR"
  fi

  while read -s line; do
    if [[ "$line" =~ ^version=.* ]]; then
      echo "${BASH_REMATCH[0]}" >|"$_HEADSTART_CORE_LOCK"
    fi
  done <"$PROJECT_DIR/version"
}

# TODO do this generic, load prompts from conf file
function core_bootstrap_configure() {
  . "$_GO_USE_MODULES" "prompt"

  local project_prompt
  local reuse_prompt
  local old_project
  local old_reuse
  local old_region
  local old_zone

  if [[ -e "$_HEADSTART_PROJECT_CONFIG" ]]; then
    string="The project has already been configured. "
    string+="Do you want to overwrite the existing configuration?"
    if ! @go.prompt_for_yes_or_no "$string" 'no'; then
      return
    fi
  fi

  if [[ ! -e "$_HEADSTART_PROJECT_CONFIG" ]]; then
    mkdir -p "${_HEADSTART_PROJECT_CONFIG%/*}"

    if [[ -r "$HEADSTART_RESOURCES_DIR/templates/project.conf" ]]; then
      cp "$HEADSTART_RESOURCES_DIR/templates/project.conf" "$_HEADSTART_PROJECT_CONFIG"
    fi
  fi

  if [[ -v EDITOR ]]; then
    "$EDITOR" "$_HEADSTART_PROJECT_CONFIG"
  else
    nano "$_HEADSTART_PROJECT_CONFIG"
  fi
}

function core_bootstrap_lock() {
  echo "status=bootstrapped" >>"$_HEADSTART_CORE_LOCK"
}

function core_bootstrap() {
  local update=false
  local interactive=true

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --update)
        update=true
        ;;
      --noninteractive)
        interactive=false
        ;;
      -*)
        abort "unrecognized option: $1" "$_HEADSTART_EC_USAGE"
        ;;
      *)
        abort "unrecognized command: $1" "$_HEADSTART_EC_USAGE"
        ;;
    esac
    shift
  done

  . "$_GO_USE_MODULES" 'installation' 'core'

  if [[ ! -r "$_HEADSTART_PROJECT_CONFIG" && "$interactive" == false ]]; then
    abort "fiveg is not configured yet, run bootstrap in interactive mode" "$_HEADSTART_EC_NOTFND"
  fi

  if [[ "$(get_installation_status)" == 'bootstrapped' && "$update" == 'false' ]]; then
    warn 'project is already bootstrapped, nothing to do'
    exit
  fi

  mkdir -p "$_HEADSTART_TMP_DIR"

  if [[ "$interactive" == true ]]; then
    core_bootstrap_configure
  fi

  core_parse_project_config
  # core_bootstrap_git_collab
  # core_bootstrap_git_hooks
  core_bootstrap_install_dependencies
  core_bootstrap_install_command
  core_bootstrap_git_lay

  local project_bootstrap_function="${0##*/}_bootstrap"
  if [[ "$(type -t "$project_bootstrap_function")" == 'function' ]]; then
    "$project_bootstrap_function"
  fi

  # TODO unify these last two functions
  core_bootstrap_set_version
  core_bootstrap_lock

  info 'bootstrap complete'
}

core_bootstrap "$@"
