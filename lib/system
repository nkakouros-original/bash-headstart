#!/usr/bin/env bash

set -o nounset          # emits error if an undefined variable is used
set -o pipefail         # emits error if a command in a pipe chain fails
shopt -s expand_aliases # allows the use of aliases in scripts
shopt -s extglob        # enables extended globbing, eg "@(aa|bb)"
shopt -s globstar       # expands `**` to any file/dir
shopt -s inherit_errexit

## @fn system_load_outro()
## @brief Loads the outro script
##
## Here we set the EXIT trap. The EXIT trap is run always at the very end of
## execution. The ERR trap (and others) are run before the EXIT trap, if they
## need to run at all.
function system_load_outro() {
  exit_code="$?"

  # . "$PROJECT_DIR/$GO_SCRIPTS_DIR/lib/outro"

  # Not really needed
  # if [[ -v HEADSTART_INSTALLATION_DIR ]]; then
  # cd "$(dirs -l -0)" >/dev/null || exit 1
  # fi

  # TODO the following always exits with 00
  # Exception::CleanUp
  rm -f $__oo__storedExceptionLineFile $__oo__storedExceptionSourceFile $__oo__storedExceptionBacktraceFile $__oo__storedExceptionFile
  exit "$exit_code"
}
trap system_load_outro EXIT

## @fn Exception::CustomCommandHandler()
## @brief Overrides the corresponding Bash Infinity function
## @param BASH_SOURCE \global
##
## For handling errors gracefully, we are using the 'utils/exception' module of
## Bash Infinity. This module will print a nice execution stack whenever a
## command in the scripts returns with a return code different to '0' (similar
## to 'set -e', but it does not stop execution). But this is problematic when
## doing TAB auto-completion in Bash. Then, the
## '$_HEADSTART_VENDOR_DIR/go-bash-script/libexec/complete' functions are called in an
## execution sequence that includes 4, 5 commands that return 1 when there is no
## candidate for completion (eg 'headstart build f<TAB>') . This causes Bash
## Infinity to trigger exception handling and print execution stacks in the
## command line. Instead, nothing should be printed to the user. One solution
## would be to patch go-script-bash's auto-completion to not return 1 if there is
## no actual error. Here, we do sth different. If the 'libexec/complete'
## functions are called at some point in the execution, we unset the ERR trap
## that Bash Infinity sets.
# TODO fix this in go-script level https://github.com/mbland/go-script-bash/issues/234
function Exception::CustomCommandHandler() {
  [integer] exit_code=1

  if [[ "${_HEADSTART_ERROR_TRACE-}" == 'false' ]]; then
    return
  fi

  # FOR tests
  if [[ "${_GO_BATS_DIR-}" != '' ]]; then
    if [[ "${e-}" != '' ]]; then
      echo "$e"
    fi
    exit $exit_code
  fi

  if ((_GO_EC_BASE <= $exit_code && $exit_code <= _GO_EC_MAX)); then
    # go-script-bash exit codes
    exit $exit_code
  elif ((_HEADSTART_EC_BASE <= $exit_code && $exit_code <= _HEADSTART_EC_MAX)); then
    exit $exit_code
  elif [[ "$exit_code" == '126' ]]; then
    # TODO is this needed
    # our custom error code for 'abort()'
    exit $exit_code
  else
    return 1
  fi
}

#?????
function show_subcommands() {
  . "$_GO_USE_MODULES" 'subcommands'
  @go.show_subcommands || exit
}

alias __='parse_args_and_options "$@"; set_plugin_env; __'

function set_plugin_env() {
  if [[ "$__go_cmd_path" =~ .+/plugins/.+ ]]; then
    go_plugin_name="${__go_cmd_path#$TWMN_COMMANDS_DIR/plugins/}"
    go_plugin_name="${go_plugin_name%%/*}"
    go_plugin_path="$TWMN_COMMANDS_DIR/plugins/$go_plugin_name"

    export go_plugin_name go_plugin_path

    if [[ -f "$_HEADSTART_CONFIG_DIR/$go_plugin_name/$go_plugin_name.conf" ]]; then
      . "$_HEADSTART_CONFIG_DIR/$go_plugin_name/$go_plugin_name.conf"
    fi
  fi
}

function parse_args_and_options() {
  if [[ " $* " == *' --complete '* ]]; then
    shift
    get_completions "$@"
    exit
  fi

  export __headstart_system_parsing_help=1
  help="$("$0" "${_GO_CMD_NAME[@]}" -h 2>&1)"
  help="${help//"$_GO_CMD" "${_GO_CMD_NAME[@]:0:${#_GO_CMD_NAME[@]}-1}"/}"
  unset __headstart_system_parsing_help

  local ec=0
  eval "$(
    # docopts return `exit 64` in case of error which causes the script to exit.
    # Mask exit to return to avoid exiting.
    echo 'exit() { return "$1"; }'
    docopts --no-help --help "$help" : "$@" || :
  )" &>/dev/null || ec="$?"

  unset exit

  if [[ "$ec" -gt 0 ]]; then
    error="$(eval "$(docopts --no-help --help "$help" : "$@" || :)" 2>&1)" || :
    error="${error/${_GO_CMD_NAME[-1]}/$_GO_CMD ${_GO_CMD_NAME[*]}}"
    info "$error" 0 'default'
    abort "" "$_GO_EC_USAGE" ''
  fi
}

function get_completions() {
  [integer] word_index=0
  [...rest] rest

  . "$_GO_USE_MODULES" 'complete'

  # Get completions from the command itself
  if type __completions &>/dev/null; then
    __completions "$word_index" "${rest[@]}"
  fi

  # Get completions from command options
  if [[ "${_GO_CMD_NAME[0]}" == 'complete' ]]; then
    help="$("$0" "${_GO_CMD_ARGV[@]:1}" -h 2>&1)"
  else
    help="$("$0" "${_GO_CMD_NAME[@]}" -h 2>&1)"
  fi
  help="${help//"$_GO_CMD" "${_GO_CMD_NAME[@]:0:${#_GO_CMD_NAME[@]}-1}"/}"

  readarray -t c <<<"$(
    awk '/Options/{
      x=NR+1000
      next
      } (NR<=x) {
        subs="^[ ]+-+[a-zA-Z]"
        if (match($0, subs)) {
          if (s=index($0, ", -")) {
            $0=substr($0, s+2)
            c=substr($0, 0, index($0, " "))
          } else {
            c=substr($1, index($1, " "))
          }
          s = index(c, "=")
          if (s > 0) {
            c=substr(c, 0, index(c, "=")-1)
          }
          print c
        }
      }' <<<"$help"
  )"
  c=(" ${c[@]%[[:space:]]} ")

  if [[ "${#rest[@]}" -gt 0 ]]; then
    unset "rest[-1]"
  fi

  @go.complete_remove_completions_already_present 'rest' 'c' "${#c[@]}"

  echo "${c[@]}"
}
